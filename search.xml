<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React中的性能优化</title>
      <link href="/2019/03/19/React%E4%B8%AD%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/03/19/React%E4%B8%AD%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="React性能优化"><a href="#React性能优化" class="headerlink" title="React性能优化"></a>React性能优化</h1><h2 id="shouldComponentUpdate与diff"><a href="#shouldComponentUpdate与diff" class="headerlink" title="shouldComponentUpdate与diff"></a>shouldComponentUpdate与diff</h2><p>在React中，常在shouldComponentUpdate中实现性能优化，如果在shouldComponentUpdate中能写出更优化的dom diff算法，就可以提高性能。</p><ul><li>shouldComponentUpdate</li></ul><p>shouldComponentUpdate是React中的一个生命周期：组件接收到新属性或者新状态的时候，返回false可以阻止调用render更新。</p><ul><li>diff原理</li></ul><p>1.把树形结构按照层级分解，只比较同级元素</p><p>2.给列表的每个单元添加唯一的key属性，方便比较</p><p>3.React只会匹配相同class的component(class指组件名字)</p><p>4.合并操作，调用component的setState方法的时候，React将其标记为dirty。每到一个事件循环结束，React检查所有标记dirty的component重新绘制</p><p>5.选择性子树渲染。开发人员可以重写shouldComponentUpdate提高diff的性能</p><h2 id="为什么要用优化diff"><a href="#为什么要用优化diff" class="headerlink" title="为什么要用优化diff"></a>为什么要用优化diff</h2><h3 id="先看一下熟悉的setState"><a href="#先看一下熟悉的setState" class="headerlink" title="先看一下熟悉的setState"></a>先看一下熟悉的setState</h3><p>使用setState修改数据，会引起React重新渲染页面，那么如果我修改的是一个无关紧要，不需要渲染的数据呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Child extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&apos;child&apos;)</span><br><span class="line">    return &lt;div&gt;child&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&apos;app&apos;)</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick=&#123;() =&gt; &#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">              x: 1,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          setState</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;Child /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，我们会发现每次点击button时，都会先输出app,之后输出child，尽管修改的x没有在App和Child中出现。由此可见，调用setState后无论修改的是什么，都会导致render触发，去重新渲染父组件和子组件。在这里，就是一个性能优化问题。</p><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><p>官方一点的定义应该称为 reconciliation，也就是 React 用来比较两棵节点树的算法，它确定树中的哪些部分需要被更新。</p><h2 id="使用shouldComponentUpdate优化"><a href="#使用shouldComponentUpdate优化" class="headerlink" title="使用shouldComponentUpdate优化"></a>使用shouldComponentUpdate优化</h2><p>刚刚我们提到过，在shouldComponentUpdate生命周期中，返回false可以阻止调用render更新。所以我们就要在shouldComponentUpdate中处理逻辑去判断时候需要调用render重新渲染。</p><p>常用的操作是在shouldComponentUpdate判断组件的props和state是否变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Child extends React.Component &#123;</span><br><span class="line">  shouldComponentUpdate = (nextProps, nextState) =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">      !shallowEqual(this.props, nextProps) ||</span><br><span class="line">      !shallowEqual(this.state, nextState)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&apos;child&apos;)</span><br><span class="line">    return &lt;div&gt;child&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以浅比较props和state的变化。为什么不用深比较？因为有时深比较的效率比render还低…</p><h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><p>React也知道自己需要优化，所以提供了PureComponent。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Child extends React.PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&apos;child&apos;)</span><br><span class="line">    return &lt;div&gt;child&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了和上面浅比较一样的功能。</p><p>当然PureComponent也不是无脑用的，对于明知道不需要修改的组件，肯定直接返回 false。而可能你没想到，对于明知道需要修改的组件，也请不要使用 PureComponent。</p><p>因为正如上面所说，PureComponent 需要进行两次浅比较，而浅比较也是要时间的，若是你明知道这个组件百分百要修改，何必浪费时间去对比呢？</p><p>所以 PureComponent 请用在较少进行修改的组件上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript性能优化——事件委托</title>
      <link href="/2019/03/19/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2019/03/19/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript性能优化——事件委托代理"><a href="#JavaScript性能优化——事件委托代理" class="headerlink" title="JavaScript性能优化——事件委托代理"></a>JavaScript性能优化——事件委托代理</h1><h2 id="看个例子"><a href="#看个例子" class="headerlink" title="看个例子"></a>看个例子</h2><p>之前在做4399的笔试题时看到了一道题：<br>创建1000个&lt;li>，点击每个&lt;li>时console.log所点击&lt;li>的内容。</p><p>如果用函数创建1000个事件监听器，将每个事件监听器绑定到DOM上，很简单就能实现这个功能，但是这样的效率就太过低下了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let Oli = document.getElementsByTagName(&apos;li&apos;);</span><br><span class="line"></span><br><span class="line">for(let i of Oli)&#123;</span><br><span class="line">  i.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    console.log(i.innerHTML)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就很容易的解决了题目，但是效率太过低下，如果是10个&lt;li>还好，1000个&lt;li>效率就太低了</p><h2 id="使用事件委托"><a href="#使用事件委托" class="headerlink" title="使用事件委托"></a>使用事件委托</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let Oul = document.getElementsByTagName(&apos;ul&apos;)[0];</span><br><span class="line"></span><br><span class="line">Oul.addEventListener(&apos;click&apos;,function(e)&#123;</span><br><span class="line">  if (e.target &amp;&amp; e.target.nodeName === &apos;LI&apos; ) &#123;</span><br><span class="line">    console.log(e.target,innerHTML)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样就通过给整个&lt;ul>注册事件监听，单击它时访问每个列表项实现事件委托。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的防抖和节流</title>
      <link href="/2019/03/16/JS%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2019/03/16/JS%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="JS中的防抖和节流"><a href="#JS中的防抖和节流" class="headerlink" title="JS中的防抖和节流"></a>JS中的防抖和节流</h1><h2 id="什么是防抖与节流，为什么需要防抖与节流？"><a href="#什么是防抖与节流，为什么需要防抖与节流？" class="headerlink" title="什么是防抖与节流，为什么需要防抖与节流？"></a>什么是防抖与节流，为什么需要防抖与节流？</h2><p>在浏览器时间，我们常常会遇到有些事件会快速的触发多次，比如调整窗口大小已经滚动条事件。那么当我们多次触发事件导致的性能问题要怎么解决呢？</p><p>这就需要我们的防抖与节流来提升性能。他们的本质都是以闭包的形式存在，通过对事件对应的回调函数进行包裹、以自由变量的形式缓存时间信息，最后用 setTimeout 来控制事件的触发频率。</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>节流的主要思想是：在某段时间内，触发多次的事件，按第一次来处理。</p><p>节流有两种实现方法：</p><ul><li>在函数执行一次之后，该函数在指定时间内不在接受工作</li></ul><p>JS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function throttle(fn,delay)&#123;</span><br><span class="line">    let valid = true      //由于使用了闭包，valid不会被内存回收，可以记录当前状态</span><br><span class="line">    return function() &#123;</span><br><span class="line">       if(!valid)&#123;</span><br><span class="line">         //指定时间未到，不接受事件处理</span><br><span class="line">           return false</span><br><span class="line">       &#125;</span><br><span class="line">       // 第一次或指定时间已到，处理事件</span><br><span class="line">        valid = false</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            fn()</span><br><span class="line">            valid = true;</span><br><span class="line">        &#125;, delay)     //在delay事件后执行运行函数，函数执行后才改变工作状态</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function fn () &#123;</span><br><span class="line">　　console.log(&apos;触发事件&apos;);</span><br><span class="line">&#125;</span><br><span class="line">window.onscroll = throttle(fn,1000)</span><br></pre></td></tr></table></figure></p><ul><li>把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定</li></ul><p>JS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function throttle(fn, interval) &#123;</span><br><span class="line">  // last为上一次触发回调的时间</span><br><span class="line">  let last = 0</span><br><span class="line"></span><br><span class="line">  // 将throttle处理结果当作函数返回</span><br><span class="line">  return function () &#123;</span><br><span class="line">      // 保留调用时的this上下文</span><br><span class="line">      let context = this</span><br><span class="line">      // 保留调用时传入的参数</span><br><span class="line">      let args = arguments</span><br><span class="line">      // 记录本次触发回调的时间</span><br><span class="line">      let now = +new Date()</span><br><span class="line"></span><br><span class="line">      // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span><br><span class="line">      if (now - last &gt;= interval) &#123;</span><br><span class="line">      // 如果时间间隔大于我们设定的时间间隔阈值，则执行回调</span><br><span class="line">          last = now;</span><br><span class="line">          fn.apply(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn () &#123;</span><br><span class="line">　　console.log(&apos;触发事件&apos;);</span><br><span class="line">&#125;</span><br><span class="line">window.onscroll = throttle(fn,1000);</span><br></pre></td></tr></table></figure></p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>节流的主要思想是：在某段时间内，触发多次的事件，按最后一次来处理。</p><p>JS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function debounce(fn, delay) &#123;</span><br><span class="line">  let timer = null    //借助闭包</span><br><span class="line"></span><br><span class="line">  // 将debounce处理结果当作函数返回</span><br><span class="line">  return function () &#123;</span><br><span class="line">    // 保留调用时的this上下文</span><br><span class="line">    let context = this</span><br><span class="line">    // 保留调用时传入的参数</span><br><span class="line">    let args = arguments</span><br><span class="line"></span><br><span class="line">    // 每次事件被触发时，都去清除之前的旧定时器</span><br><span class="line">    if(timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    // 设立新定时器</span><br><span class="line">    timer = setTimeout(function () &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn () &#123;</span><br><span class="line">　　console.log(&apos;触发事件&apos;);</span><br><span class="line">&#125;</span><br><span class="line">window.onscroll = throttle(fn,1000);</span><br></pre></td></tr></table></figure></p><h3 id="使用节流来优化防抖"><a href="#使用节流来优化防抖" class="headerlink" title="使用节流来优化防抖"></a>使用节流来优化防抖</h3><p>如果用户一直在施行防抖函数，那么防抖函数就不会做出回应，这时，就需要打造一个在规定时间内一定会做出反应的防抖函数。</p><p>JS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">  // last为上一次触发回调的时间, timer是定时器</span><br><span class="line">  let last = 0, timer = null</span><br><span class="line">  // 将throttle处理结果当作函数返回</span><br><span class="line"></span><br><span class="line">  return function () &#123;</span><br><span class="line">    // 保留调用时的this上下文</span><br><span class="line">    let context = this</span><br><span class="line">    // 保留调用时传入的参数</span><br><span class="line">    let args = arguments</span><br><span class="line">    // 记录本次触发回调的时间</span><br><span class="line">    let now = +new Date()</span><br><span class="line"></span><br><span class="line">    // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span><br><span class="line">    if (now - last &lt; delay) &#123;</span><br><span class="line">    // 如果时间间隔小于我们设定的时间间隔阈值，则为本次触发操作设立一个新的定时器</span><br><span class="line">       clearTimeout(timer)</span><br><span class="line">       timer = setTimeout(function () &#123;</span><br><span class="line">          last = now</span><br><span class="line">          fn.apply(context, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 如果时间间隔超出了我们设定的时间间隔阈值，那就不等了，无论如何要反馈给用户一次响应</span><br><span class="line">        last = now</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn () &#123;</span><br><span class="line">　　console.log(&apos;触发事件&apos;);</span><br><span class="line">&#125;</span><br><span class="line">window.onscroll = throttle(fn,1000);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS深度优先搜索</title>
      <link href="/2019/03/15/JS%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2019/03/15/JS%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="JS实现深度优先遍历"><a href="#JS实现深度优先遍历" class="headerlink" title="JS实现深度优先遍历"></a>JS实现深度优先遍历</h1><p>需要遍历的树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var tree = &#123;</span><br><span class="line">name : &apos;中国&apos;,</span><br><span class="line">children : [</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;北京&apos;,</span><br><span class="line">children : [</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;朝阳群众&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;海淀区&apos;</span><br><span class="line">&#125;,</span><br><span class="line">                &#123;</span><br><span class="line">name : &apos;昌平区&apos;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;浙江省&apos;,</span><br><span class="line">children : [</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;杭州市&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;嘉兴市&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;绍兴市&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name : &apos;宁波市&apos;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h2><p>JS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function dfs(node,nam)&#123;</span><br><span class="line">  let nodes=[];</span><br><span class="line">  if(node!=null)&#123;</span><br><span class="line">      let stack=[];         //同来存放将来要访问的节点</span><br><span class="line">      stack.push(node);</span><br><span class="line">      while(stack.length!=0)&#123;</span><br><span class="line">          let item=stack.pop();     //正在访问的节点</span><br><span class="line">          nodes.push(item);</span><br><span class="line">          let childrens=item.children;</span><br><span class="line">        if(item.name===nam)     //判断内容是否是要查找的节点</span><br><span class="line">          &#123;</span><br><span class="line">            return item;</span><br><span class="line">          &#125;</span><br><span class="line">          if(childrens)     //当没有子节点时返回父节点，当存在子节点才遍历子节点</span><br><span class="line">          &#123;</span><br><span class="line">            for(let i=childrens.length-1;i&gt;=0;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.push(childrens[i]);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      return nodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><p>JS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function dfs(node,nodes=[])&#123;</span><br><span class="line">  if(node!=null)&#123;</span><br><span class="line">      nodes.push(node);</span><br><span class="line">      let childrens=node.children;</span><br><span class="line"></span><br><span class="line">      if(childrens)       //如果存在子节点</span><br><span class="line">        &#123;</span><br><span class="line">            for(let i=0;i&lt;childrens.length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">              dfs(childrens[i],nodes);      //递归</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  return nodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局方案</title>
      <link href="/2019/03/15/CSS%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/"/>
      <url>/2019/03/15/CSS%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS布局方案"><a href="#CSS布局方案" class="headerlink" title="CSS布局方案"></a>CSS布局方案</h1><h2 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><h4 id="inline-block-text-align"><a href="#inline-block-text-align" class="headerlink" title="inline-block + text-align"></a>inline-block + text-align</h4><p>将子盒子由块级元素转变为行内元素，再通过text-align:center达到水平居中</p><p>对子盒子设置display:inline-block,父级元素设置text-align:center</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.outer&#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.iner&#123;</span><br><span class="line">  display:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容ie6/7，可是子元素的文字也会居中，在子元素设置text-align:left解决</p><h4 id="table-margin"><a href="#table-margin" class="headerlink" title="table + margin"></a>table + margin</h4><p>设置子元素为块级元素，使用margin: 0 auto实现水平居中</p><p>子元素设置display:table,margin: 0 auto</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.iner&#123;</span><br><span class="line">  display:table;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置简单，但是不支持ie8以下，因为ie6/7无法转换div为table</p><h4 id="absolute-transform"><a href="#absolute-transform" class="headerlink" title="absolute + transform"></a>absolute + transform</h4><p>将子元素设置为绝对定位，移动子元素，使子元素左侧距离相对框左侧边框的距离为相对元素宽度的一半，再通过向左移动子元素的一半宽度以达到水平居中。当然，在此之前，我们需要设置父元素为相对定位，使父元素成为子元素的相对元素</p><p>对父框设置position:relative，对子框设置position:absolute，left:50%，transform:translateX(-50%)</p><p>HTML<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.iner &#123;</span><br><span class="line">position:absolute;</span><br><span class="line">left:50%;</span><br><span class="line">transform:translateX(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>居中的元素不会对其他元素产生影响，因为是绝对定位，然而会有兼容性问题(CSS3，需要添加浏览器前缀)</p><h4 id="flex-margin"><a href="#flex-margin" class="headerlink" title="flex + margin"></a>flex + margin</h4><p>通过flex布局将子元素转换为flex item，再设置子元素居中以达到居中</p><p>先将父元素设置为display:flex，再设置子元素margin:0 auto。</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.iner &#123;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性差，ie8以下不支持(包括ie8)</p><h4 id="flex-justify-content"><a href="#flex-justify-content" class="headerlink" title="flex + justify-content"></a>flex + justify-content</h4><p>通过flex布局的justify-content属性达到水平居中</p><p>设置父元素display:flex,justify-content:center</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只用给父元素设置样式，ie6、7、8依旧不支持</p><h3 id="垂直布局"><a href="#垂直布局" class="headerlink" title="垂直布局"></a>垂直布局</h3><h4 id="table-cell-vertical-align"><a href="#table-cell-vertical-align" class="headerlink" title="table-cell + vertical-align"></a>table-cell + vertical-align</h4><p>通过将父元素转化为一个表格单元格显示（类似 <td> 和 <th>），再通过设置属性，使表格单元格内容垂直居中以达到垂直居中</th></td></p><p>先将父元素设置为display:table-cell，再设置vertical-align:middle</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">  height:400px;</span><br><span class="line">  display:table-cell;     /*display:table-cell使子元素成为表格单元格*/</span><br><span class="line">  vertical-align:middle;      /*设置垂直居中*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ie8以上都支持</p><h4 id="absolute-transform-1"><a href="#absolute-transform-1" class="headerlink" title="absolute + transform"></a>absolute + transform</h4><p>类似于水平居中，先将父元素设置为position:relative，再设置子元素position:absolute，top:50%，transform:translateY(-50%)</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    height:400px;</span><br><span class="line">    position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.iner &#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:50%;</span><br><span class="line">    transform:translateY(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>居中元素不会对其他元素产生影响（absolute）,CSS3需要添加浏览器前缀</p><h4 id="flex-align-items"><a href="#flex-align-items" class="headerlink" title="flex + align-items"></a>flex + align-items</h4><p>通过flex布局的align-times属性达到垂直居中<br>先将父元素设置为position:flex，再设置align-items:center</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    height:400px;</span><br><span class="line">    display:flex;</span><br><span class="line">    align-items:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只用设置父元素的css，但是兼容性较差</p><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><h4 id="absolute-transform-2"><a href="#absolute-transform-2" class="headerlink" title="absolute + transform"></a>absolute + transform</h4><p>将水平居中时的absolute + transform和垂直居中时的absolute + transform相结合</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    height:400px;</span><br><span class="line">    position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.iner &#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:50%;</span><br><span class="line">    top:50%;</span><br><span class="line">    transform:tranplate(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>居中元素不会对其他元素产生影响，兼容性存在问题</p><h4 id="inline-block-text-align-table-cell-vertical-align"><a href="#inline-block-text-align-table-cell-vertical-align" class="headerlink" title="inline-block + text-align + table-cell + vertical-align"></a>inline-block + text-align + table-cell + vertical-align</h4><p>使用inline-block + text-align水平居中，再用table-cell + vertical-align垂直居中，将二者结合起来</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    width:600px;</span><br><span class="line">    height:400px;</span><br><span class="line">    text-align:center;</span><br><span class="line">    display:table-cell;</span><br><span class="line">    vertical-align:middle;</span><br><span class="line">&#125;</span><br><span class="line">.iner &#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性较好</p><h4 id="flex-justify-content-align-items"><a href="#flex-justify-content-align-items" class="headerlink" title="flex + justify-content + align-items"></a>flex + justify-content + align-items</h4><p>使用flex布局中的justify-content（水平）和align-items（垂直）属性</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;outer&apos;&gt;</span><br><span class="line">  &lt;div class=&apos;iner&apos;&gt;this&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    height:400px;</span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:center;</span><br><span class="line">    align-items:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><h3 id="定宽-自适应"><a href="#定宽-自适应" class="headerlink" title="定宽+自适应"></a>定宽+自适应</h3><h4 id="float-overflow"><a href="#float-overflow" class="headerlink" title="float + overflow"></a>float + overflow</h4><p>通过将左边元素脱离文本流，设置右边元素规定当内容溢出元素框时发生的事情以达到多列布局</p><p>先将左元素设置为float:left、width、margin-left，再设置实际的右元素overflow:hidden</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">    &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">    &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.left &#123;</span><br><span class="line">    float:left;</span><br><span class="line">    background-color:red;</span><br><span class="line">    width:100px;</span><br><span class="line">    margin-right:20px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">    background-color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不支持ie6</p><h4 id="float-margin"><a href="#float-margin" class="headerlink" title="float + margin"></a>float + margin</h4><p>通过将左元素脱离文本流，加上右元素向右移动一定的距离，向右框添加一个父框，再加上设置左、右父框属性使之产生BFC，以达到视觉上的多列布局</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">    &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;rigth-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.left &#123;</span><br><span class="line">  background-color:red;</span><br><span class="line">  float:left;</span><br><span class="line">  width:100px;</span><br><span class="line">  position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.right-box &#123;</span><br><span class="line">  float:right;</span><br><span class="line">  width:100%;</span><br><span class="line">  margin-left:-100px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">  background-color:blue;</span><br><span class="line">  margin-left:100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>通过将父元素设置为表格，将左右元素转化为类似于同一行的td，从而达到多列布局<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">    &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">    &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.left &#123;</span><br><span class="line">  background-color:red;</span><br><span class="line">  width:100px;</span><br><span class="line">&#125;</span><br><span class="line">.outer &#123;</span><br><span class="line">  display:table;</span><br><span class="line">  width:100%;</span><br><span class="line">  table-layout:fixed;</span><br><span class="line">&#125;</span><br><span class="line">.right,.left &#123;</span><br><span class="line">  display:table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>通过flex中的flex属性以达到多列布局<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">    &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">    &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    width:100px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    flex:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>存在兼容性和性能问题</p><h3 id="两列定宽-一列自适应"><a href="#两列定宽-一列自适应" class="headerlink" title="两列定宽 + 一列自适应"></a>两列定宽 + 一列自适应</h3><p>先将左、中元素设置为float:left、width、margin-right，再设置右框overflow:hidden</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">        &lt;p&gt;center&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="不定宽-自适应"><a href="#不定宽-自适应" class="headerlink" title="不定宽 + 自适应"></a>不定宽 + 自适应</h3><h4 id="float-overflow-1"><a href="#float-overflow-1" class="headerlink" title="float + overflow"></a>float + overflow</h4><p>将左元素设置为float:left，再设置右元素overflow: hidden，最后设置左元素中的内容width<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.outer&#123;</span><br><span class="line">  display: table; width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.left,.right&#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">  width: 0.1%;  /*不设宽度，宽度跟着内容走。比如：.left p&#123;width:200px&#125;*/</span><br><span class="line">  - adding-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.left p&#123;</span><br><span class="line">  width:200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ie6下兼容性存在一定问题</p><h4 id="table-1"><a href="#table-1" class="headerlink" title="table"></a>table</h4><p>通过将父框改变为表格，将左右元素转换为类似于同一行的td以达到多列布局，设置父元素宽度100%，给左元素子元素一个固定宽度从而达到自适应</p><p>先将父元素设置为display: table、width: 100%，再设置左、右元素display: table-cell，最后设置左元素width: 0.1%、padding-right以及左元素中的内容width</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.outer&#123;</span><br><span class="line">    display: table;</span><br><span class="line">    width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">.left,.right&#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width: 0.1%;</span><br><span class="line">    padding-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.left p&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ie6/7不支持</p><h4 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h4><p>通过flex布局中的flex属性以达到多列布局，加上给左元素中的内容定宽、给右元素设置flex达到不定款+自适应<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    margin-right:20px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    flex:1;</span><br><span class="line">&#125;</span><br><span class="line">.left p&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性存在一定问题，性能存在一定问题</p><h3 id="两列不定宽-一列自适应"><a href="#两列不定宽-一列自适应" class="headerlink" title="两列不定宽 + 一列自适应"></a>两列不定宽 + 一列自适应</h3><p>先将左、中元素设置为float:left、margin-right，再设置右元素overflow:hidden，最后给左中元素中的内容设置width<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">        &lt;p&gt;center&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.left,.center&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.left p,.center p&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="等分布局"><a href="#等分布局" class="headerlink" title="等分布局"></a>等分布局</h3><p>设父元素总长度为l，子元素宽度为w，边距为g，个数为n</p><p>l = w <em> n + g </em> (n-1) -&gt; l = w <em> n + g </em> n - g -&gt; l + g = （w + g） * n</p><ul><li>如何让总宽度增加g(即：L+g)</li><li>如何让每个宽包含g（即：w+g）</li></ul><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><p>增大父元素的实际宽度后，使用CSS3属性box-sizing进行布局的辅助</p><p>先将父框设置为margin-left: -*px（扩大父元素），再设置子框float: left、width: 25%、padding-left、box-sizing: border-box（使子元素包含边距）</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;4&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.outer&#123;</span><br><span class="line">  margin-left: -20px;   /*l增加g*/</span><br><span class="line">&#125;</span><br><span class="line">.iner&#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 25%;</span><br><span class="line">  padding-left: 20px;</span><br><span class="line">  box-sizing: border-box;     /*包含padding区域 w+g*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ie6 ie7百分比兼容存在一定问题</p><h4 id="table-2"><a href="#table-2" class="headerlink" title="table"></a>table</h4><p>通过增加一个父元素的修正框，增大其宽度，并将父元素转换为table，将子元素转换为tabel-cell进行布局</p><p>先将父元素的修正元素设置为margin-left: -*px，再设置父元素display: table、width:100%、table-layout: fixed（列宽由表格宽度和列宽度设定），设置子元素display: table-cell、padding-left</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;4&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.outer-box&#123;</span><br><span class="line">    margin-left: -20px;       /*l增加g*/</span><br><span class="line">&#125;</span><br><span class="line">.outer&#123;</span><br><span class="line">    display: table;</span><br><span class="line">    width:100%;</span><br><span class="line">    table-layout: fixed;</span><br><span class="line">&#125;</span><br><span class="line">.iner&#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    padding-left: 20px;     /*包含padding区域 w+g*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结构和块数无关联，增加了一层div</p><h4 id="flex-2"><a href="#flex-2" class="headerlink" title="flex"></a>flex</h4><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;iner&quot;&gt;&lt;p&gt;4&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.outer&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.iner&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">.iner+.iner&#123;        /*选择相邻兄弟*/   </span><br><span class="line">    margin-left:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码量少，与块数无关，兼容性差</p><h3 id="定宽-自适应-两块高度一样高"><a href="#定宽-自适应-两块高度一样高" class="headerlink" title="定宽 + 自适应 + 两块高度一样高"></a>定宽 + 自适应 + 两块高度一样高</h3><h4 id="float-1"><a href="#float-1" class="headerlink" title="float"></a>float</h4><p>通过过分加大左右子元素的高度，辅助超出隐藏，以达到视觉上的等高</p><p>将父元素设置overflow: hidden，再设置左右子元素padding-bottom: 9999px、margin-bottom: -9999px，最后设置左元素float: left、width、margin-right，右元素overflow: hidden。<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    background: none!important;</span><br><span class="line">&#125;</span><br><span class="line">.left,.right&#123;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.outer&#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.left,.right&#123;</span><br><span class="line">    padding-bottom: 9999px;</span><br><span class="line">    margin-bottom: -9999px;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>伪等高，不是真正意义上的等高</p><h4 id="table-3"><a href="#table-3" class="headerlink" title="table"></a>table</h4><p>将父元素转化为tabel，将子元素转化为tabel-cell布局，以达到定宽+自适应+两块高度一样高</p><p>先将父元素设置为display:table、width:100%、table-layout:fixed，再设置左右元素为display:table-cell，最后设置左元素width、padding-right<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    display:table;</span><br><span class="line">    width:100%;</span><br><span class="line">    table-layout:fixed;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    width:100px;</span><br><span class="line">    padding-right:20px;</span><br><span class="line">&#125;</span><br><span class="line">.right,.left &#123;</span><br><span class="line">    display:table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="flex-3"><a href="#flex-3" class="headerlink" title="flex"></a>flex</h4><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    width:100px;</span><br><span class="line">    margin-right:20px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    flex:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>flex兼容性较差</p><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>通过设置display中的CSS3的-webkit-box属性以达到定宽+自适应+两块高度一样高</p><p>将父元素设置为display: -webkit-box、width: 100%，再设置左元素width、margin-right，最后设置右元素-webkit-box-flex: 1。</p><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;p&gt;left&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;right&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.outer &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    width:100px;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    -webkit-box-flex: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性有较大问题</p><h2 id="全屏布局"><a href="#全屏布局" class="headerlink" title="全屏布局"></a>全屏布局</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>滚动条不是全局滚动条，而是出现在内容区域里，往往是主内容区域</li><li>浏览器变大时，撑满窗口<h3 id="全屏布局的方法"><a href="#全屏布局的方法" class="headerlink" title="全屏布局的方法"></a>全屏布局的方法</h3></li></ul><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><p>将上下部分固定，中间部分使用定宽+自适应+两块高度一样高<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;top&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;right&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">html,body,.outer&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    height:100%;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    color:white;</span><br><span class="line">&#125;</span><br><span class="line">.top&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:0;</span><br><span class="line">    left:0;</span><br><span class="line">    right:0;</span><br><span class="line">    height:100px;</span><br><span class="line">    background:blue;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:0;</span><br><span class="line">    top:100px;</span><br><span class="line">    bottom:50px;</span><br><span class="line">    width:200px;</span><br><span class="line">    background:red;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:200px;</span><br><span class="line">    top:100px;</span><br><span class="line">    bottom:50px;</span><br><span class="line">    right:0;</span><br><span class="line">    background:pink;</span><br><span class="line">    overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line">.right .inner&#123;</span><br><span class="line">    min-height: 1000px;</span><br><span class="line">&#125;</span><br><span class="line">.bottom&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:0;</span><br><span class="line">    right:0;</span><br><span class="line">    bottom:0;</span><br><span class="line">    height:50px;</span><br><span class="line">    background: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性好，ie6下不支持</p><h4 id="flex-4"><a href="#flex-4" class="headerlink" title="flex"></a>flex</h4><p>利用flex-direction属性以达到全屏布局<br>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;top&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;middle&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;inner&quot;&gt;right&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">html,body,.outer&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    height:100%;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    color: white;</span><br><span class="line">&#125;</span><br><span class="line">.outer&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">.top&#123;</span><br><span class="line">    height:100px;</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br><span class="line">.bottom&#123;</span><br><span class="line">    height:50px;</span><br><span class="line">    background: black;</span><br><span class="line">&#125;</span><br><span class="line">.middle&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    overflow: auto;</span><br><span class="line">    background:pink;</span><br><span class="line">&#125;</span><br><span class="line">.right .inner&#123;</span><br><span class="line">    min-height: 1000px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兼容性差，ie9及ie9以下不兼容</p><h3 id="全部自适应布局"><a href="#全部自适应布局" class="headerlink" title="全部自适应布局"></a>全部自适应布局</h3><h4 id="flex-5"><a href="#flex-5" class="headerlink" title="flex"></a>flex</h4><p>HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;top&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;middle&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;inner&quot;&gt;right&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">html,body,.outer&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    height:100%;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    color:white;</span><br><span class="line">&#125;</span><br><span class="line">.outer&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">    flex-direction:column;</span><br><span class="line">&#125;</span><br><span class="line">.top&#123;</span><br><span class="line">    background:blue;</span><br><span class="line">&#125;</span><br><span class="line">.bottom&#123;</span><br><span class="line">    background:black;</span><br><span class="line">&#125;</span><br><span class="line">.middle&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">    overflow:auto;</span><br><span class="line">    background: pink;</span><br><span class="line">&#125;</span><br><span class="line">.right .inner&#123;</span><br><span class="line">    min-height:1000px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中遍历数组的四种方法</title>
      <link href="/2019/03/13/Javascript%E4%B8%AD%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/13/Javascript%E4%B8%AD%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript中遍历数组的四种方法"><a href="#Javascript中遍历数组的四种方法" class="headerlink" title="Javascript中遍历数组的四种方法"></a>Javascript中遍历数组的四种方法</h1><h2 id="都有哪几种遍历数组的方法呢？"><a href="#都有哪几种遍历数组的方法呢？" class="headerlink" title="都有哪几种遍历数组的方法呢？"></a>都有哪几种遍历数组的方法呢？</h2><ul><li>for</li><li>forEach()</li><li>for/in</li><li>for/of</li></ul><h2 id="访问元素下标"><a href="#访问元素下标" class="headerlink" title="访问元素下标"></a>访问元素下标</h2><p>在使用for和for/in时，我们访问的是元素的下表，通过arr[i]的方式获取元素值。</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for(let i= 0 ; i &lt; a.length ; i++)</span><br><span class="line">&#123;</span><br><span class="line">  console.log(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (let i in a )&#123;</span><br><span class="line">  console.log(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么for/of与forEach()呢</p><h3 id="for-of"><a href="#for-of" class="headerlink" title="for/of"></a>for/of</h3><p>我们可以通过for/of直接访问到元素值</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let i of a)&#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>forEach()可以说是两者的集合了，他可以获取元素值也可以获取元素下标</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.forEach((i,j) =&gt; console.log(i + &apos;的下标是&apos; + j))</span><br></pre></td></tr></table></figure><h2 id="谈一谈js中的数组"><a href="#谈一谈js中的数组" class="headerlink" title="谈一谈js中的数组"></a>谈一谈js中的数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = [1,2,3,4,5];</span><br><span class="line">typeof(a);      //Object</span><br></pre></td></tr></table></figure><p>显然js中的数组就是Object，那么Object最重要是是什么呢，就是属性，如果给数组添加属性遍历它会发生什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let a = [1,2,3,4,5];</span><br><span class="line">a.log = &apos;here&apos;;</span><br><span class="line">console.log(a);     //[1, 2, 3, 4, 5, log: &quot;here&quot;]</span><br><span class="line"></span><br><span class="line">for(let i in a )&#123;</span><br><span class="line">  console.log(a[i])     //1,2,3,4,5,here</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let i = 0 ;i &lt; a.length ; i++)&#123;</span><br><span class="line">  console.log(a[i])      //1,2,3,4,5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let i of a)&#123;</span><br><span class="line">  console.log(i)         //1,2,3,4,5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.forEach((i,j) =&gt; console.log(i,j))    //1 0,2 1,3 2,4 3,5 4</span><br></pre></td></tr></table></figure><p>由此可见4种循环中只有for/in会遍历非数字属性，所以一般要避免使用for/in来遍历数组</p><h2 id="数组有空的元素"><a href="#数组有空的元素" class="headerlink" title="数组有空的元素"></a>数组有空的元素</h2><p>如果数组中有空元素，那么会不会遍历它呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let a = [1, ,3,4];</span><br><span class="line"></span><br><span class="line">for(let i in a )&#123;</span><br><span class="line">  console.log(a[i])     //1,3,4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let i = 0 ;i &lt; a.length ; i++)&#123;</span><br><span class="line">  console.log(a[i])      //1,undefined,3,4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(let i of a)&#123;</span><br><span class="line">  console.log(i)         //1,undefined,3,4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.forEach((i,j) =&gt; console.log(i))    //1,3,4</span><br></pre></td></tr></table></figure><p>在数组中有空元素时，for和for/of会打印空元素为undefined，而forEach()与for/in会跳过空元素</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的用fs模块遍历文件夹</title>
      <link href="/2018/07/31/%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8fs%E6%A8%A1%E5%9D%97%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2018/07/31/%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8fs%E6%A8%A1%E5%9D%97%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="讲一些没用的东西"><a href="#讲一些没用的东西" class="headerlink" title="讲一些没用的东西"></a>讲一些没用的东西</h1><p>为什么写了这个博客呢，因为最近遇到需要返回目录文件的功能，这里就用nodejs实现下</p><h1 id="需要模块"><a href="#需要模块" class="headerlink" title="需要模块"></a>需要模块</h1><ul><li>fs</li><li>path</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">function findfile(userid,callback)&#123;</span><br><span class="line">  var fname = &#123;</span><br><span class="line">    author : userid,</span><br><span class="line">    title : new Array()</span><br><span class="line">  &#125;;</span><br><span class="line">  var needfind = &apos;../user/&apos; + userid ;</span><br><span class="line">  function indexfile( inputPath)&#123;</span><br><span class="line">       let files = fs.readdirSync(inputPath)      //同步读取文件</span><br><span class="line">       for(file of files)&#123;</span><br><span class="line">           let filePath = inputPath + &apos;/&apos; + file;   //获取文件路径</span><br><span class="line">           let fileState = fs.statSync(filePath);</span><br><span class="line">           if(fileState.isDirectory())&#123;          // 如果是目录 递归</span><br><span class="line">               indexfile(filePath)</span><br><span class="line">           &#125;else&#123;</span><br><span class="line">               fname.title.push(file.slice(0,file.length-3));     //字符串截取，去掉文件后缀</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  indexfile(needfind)</span><br><span class="line">  callback(fname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports.findfile = findfile;</span><br></pre></td></tr></table></figure><p>写的是一个node模块主要是遍历指定用户目录，将目录下所有文件推入数组返回</p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用express设置cookie</title>
      <link href="/2018/07/24/%E4%BD%BF%E7%94%A8express%E8%AE%BE%E7%BD%AEcookie/"/>
      <url>/2018/07/24/%E4%BD%BF%E7%94%A8express%E8%AE%BE%E7%BD%AEcookie/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h1><p>cookie是客户端请求服务器时，客户端向服务器发送的一些信息，多配合session配合用于用户验证。</p><p>cookie可以在浏览器中查看（chrome浏览器开发者工具）：</p><p><img src="http://p6894qyp6.bkt.clouddn.com/cookie-1.png" alt=""></p><h1 id="为什么需要cookie"><a href="#为什么需要cookie" class="headerlink" title="为什么需要cookie"></a>为什么需要cookie</h1><p>http协议是无状态的，不能记录客户端与服务器之间的连接信息，如果我们需要保存用户的登录状态，那么就需要在客户端向服务器发送一个验证，表示该用户已登录，这时就需要cookie出场了<br>。</p><p>cookie是又时限的，有一个属性maxAge可以设置cookie的存储时间，超过时间后cookie会被删除，默认的是浏览器关闭时清除cookie。cookie一般用于用户的自动登录，记住密码等，将账户信息保存在cookie中，登录时cookie被传送到服务器完成自动登录。</p><h1 id="express如何设置cookie"><a href="#express如何设置cookie" class="headerlink" title="express如何设置cookie"></a>express如何设置cookie</h1><h2 id="所需模块"><a href="#所需模块" class="headerlink" title="所需模块"></a>所需模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var express=require(&quot;express&quot;);</span><br><span class="line">var cookieParase = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br></pre></td></tr></table></figure><p>需要的模块使用npm install + 模块名即可安装</p><h2 id="设置的主要参数"><a href="#设置的主要参数" class="headerlink" title="设置的主要参数"></a>设置的主要参数</h2><ul><li><p>name: 类型为String</p></li><li><p>value: 类型为String和Object，如果是Object会在cookie.serialize()之前自动调用JSON.stringify对其进行处理</p></li><li><p>Option: 类型为对象，可使用的属性如下</p></li><li><p>domain：cookie在什么域名下有效，类型为String,。默认为网站域名</p></li><li><p>expires: cookie过期时间，类型为Date。如果没有设置或者设置为0，那么该cookie只在这个这个session有效，即关闭浏览器后，这个cookie会被浏览器删除。</p></li><li><p>httpOnly: 只能被web server访问，类型Boolean,禁止客户端JavaScript的访问，禁止后不能使用document.cookie。</p></li><li><p>maxAge: 实现expires的功能，设置cookie过期的时间，类型为String，指明从现在开始，多少毫秒以后，cookie到期。</p></li><li><p>path: cookie在什么路径下有效，默认为’/’，类型为String</p></li><li><p>secure：只能被HTTPS使用，类型Boolean，默认为false</p></li><li><p>signed:使用签名，类型Boolean，默认为false。express会使用req.secret来完成签名，需要cookie-parser配合使用</p></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ul><li><p>设置cookie</p><p>如：res.cookie(‘id’,1,{ expires: new Date(Date.now() + 100), httpOnly: true });</p></li></ul><blockquote><p>res.cookie(name, value [, options]);</p></blockquote><blockquote><p>name 是 cookie 名，value 是 cookie 值，可以是 json 对象或字符串。</p></blockquote><ul><li><p>获取cookie</p><p>req.cookies.key(获取名称为key的cookie的值)    或   req.cookies</p></li><li><p>删除cookie</p><p>res.clearCookie(name [, options]);</p></li></ul><blockquote><p>name 是 cookie 名，options 与创建 cookie 时所传一致</p></blockquote><h2 id="cookie的跨域设置"><a href="#cookie的跨域设置" class="headerlink" title="cookie的跨域设置"></a>cookie的跨域设置</h2><p>一牵扯到后台一定少不了跨域，cookie的设置有时也要牵扯到跨域设置。</p><ul><li>在服务器设置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(cors(&#123;</span><br><span class="line">      origin: &apos;*&apos;,</span><br><span class="line">　    credentials: true</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>对应客户端的 xhrFields.withCredentials: true 参数，服务器端通过在响应 header 中设置 Access-Control-Allow-Credentials = true 来运行客户端携带证书式访问。通过对 Credentials 参数的设置，就可以保持跨域 Ajax 时的 Cookie。这里需要注意的是：</p><p>服务器端 Access-Control-Allow-Credentials = true时，参数Access-Control-Allow-Origin 的值不能为 ‘*’ 。</p><ul><li>如果客户端AJAX请求需要发送cookie，则在AJAX中设置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhrFields: &#123; withCredentials: true&#125;,</span><br><span class="line">crossDomain: true,</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>我们大致就完成了跨域的cookie设置，cookie的设置十分关键，应该还要加上加密等措施，之后再介绍。</p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中的const命令</title>
      <link href="/2018/05/31/ES6%E4%B8%AD%E7%9A%84const%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/31/ES6%E4%B8%AD%E7%9A%84const%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在ES5中有两种声明变量的方法分别是var命令和function命令。在ES6中声明变量的方法扩展为了6种，还有let、const、import、class命令。在这里说一下const命令。</p><h1 id="const的基本用法"><a href="#const的基本用法" class="headerlink" title="const的基本用法"></a>const的基本用法</h1><p>const命令声明一个只读常量，常量的值不可以改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const x = 2018;</span><br><span class="line">x = 2019;       // Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure></p><p>可以看出来，在const声明的常量值不可以改变。这也就意味着const一旦声明常量，就要立即初始化常量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const x;        // Uncaught SyntaxError: Missing initializer in const declaration</span><br></pre></td></tr></table></figure><p>由此看出声明const常量时必须赋值。</p><h1 id="与let有一样的特征"><a href="#与let有一样的特征" class="headerlink" title="与let有一样的特征"></a>与let有一样的特征</h1><h2 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h2><p>与let命令一样，const也存在暂时性死区，只能在声明后使用它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(x);     // Uncaught ReferenceError: x is not defined</span><br><span class="line">const x = 5;</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>还是与let命令一样，const命令只在声明它的块级作用域内有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">    const x = 2018;</span><br><span class="line">&#125;</span><br><span class="line">console.log(x);     // Uncaught ReferenceError: x is not defined</span><br></pre></td></tr></table></figure><h2 id="不可重复声明"><a href="#不可重复声明" class="headerlink" title="不可重复声明"></a>不可重复声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const x = 2018;</span><br><span class="line">const y = 2019;</span><br><span class="line">const x = 2010;         // Uncaught SyntaxError: Identifier &apos;x&apos; has already been declared</span><br><span class="line">const y = 2011;         // Uncaught SyntaxError: Identifier &apos;y&apos; has already been declared</span><br></pre></td></tr></table></figure><h1 id="const命令的本质"><a href="#const命令的本质" class="headerlink" title="const命令的本质"></a>const命令的本质</h1><p>const本质是变量值不可改变吗？并不是，学过C语言的都知道常量值是保存在地址中的，那么const的常量值不可改变，是指指向常量的那个内存地址不得改动。在js中分为简单数据类型和复合数据类型。对于简单数据类型，值就保存在变量指向的内存地址中。而对于复合数据类型，变量指向的是指向数据结构的指针，const只能保证这个指针不会发生改变，但是指针的另一头：指向的数据结构，就不能保证它不会发生变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const x =&#123;&#125;;</span><br><span class="line">x.int = 2018;</span><br><span class="line">x.char = &apos;change&apos;;</span><br><span class="line"></span><br><span class="line">console.log(x.int);         // 2018</span><br><span class="line"></span><br><span class="line">x.int = 2015;</span><br><span class="line"></span><br><span class="line">console.log(x.int);         // 2015</span><br><span class="line">console.log(x.char);        // change</span><br></pre></td></tr></table></figure><p>以上代码我们改变了对象属性(指针所指向的数据结构)，x指向的对象还是发生了改变。</p><h1 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze"></a>Object.freeze</h1><p>如果我们想让const指向的对象也不能改变怎么办，那么我们就需要Object.freeze方法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const x = Object.freeze(&#123;&#125;);</span><br><span class="line">x.int = 2018;               // 严格模式下会报错</span><br><span class="line">console.log(x.int);         // undefined</span><br></pre></td></tr></table></figure><p>在我们冻结了对象之后对象就完全冻结了吗？NO，如果对象的属性还是一个对象呢，它的值能不能改变？所以，我们还需要冻结对象的属性。</p><p>以下函数可以彻底冻结一个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var constantize = (obj) =&gt; &#123;</span><br><span class="line">    Object.freeze(obj);</span><br><span class="line">    Object.keys(obj).forEach( (key, i) =&gt; &#123;</span><br><span class="line">        if( typeof obj[key] === &apos;object&apos;)&#123;</span><br><span class="line">            constantize(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中的let命令</title>
      <link href="/2018/05/30/ES6%E4%B8%AD%E7%9A%84let%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/30/ES6%E4%B8%AD%E7%9A%84let%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>ES6中新规定了let命令，用于声明变量，但是有了var命令，我们为什么还需要let命令呢。</p><p>let用于声明变量，类似于var，但是用let声明的变量只在声明let的代码块内有效。</p><h1 id="var和let的作用域区别"><a href="#var和let的作用域区别" class="headerlink" title="var和let的作用域区别"></a>var和let的作用域区别</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var x = 2018;</span><br><span class="line">    let y = 2019;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(x)       // 2018</span><br><span class="line">console.log(y)       // Uncaught ReferenceError: y is not defined</span><br></pre></td></tr></table></figure><p>还有js经典的循环问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a=[];</span><br><span class="line">for(var i=0;i&lt;10;i++)&#123;</span><br><span class="line">a[i]=function()&#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(a[2]());        // 10</span><br></pre></td></tr></table></figure></p><p>上面是用var声明i变量，在全局范围内有效，其中console.log(i)指向的是全局变量的i，也就是10次循环之后的值，也就是10.如果是用let声明i呢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a=[];</span><br><span class="line">for(let i=0;i&lt;10;i++)&#123;</span><br><span class="line">    a[i]=function()&#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(a[2]());        // 2</span><br></pre></td></tr></table></figure></p><p>这里的i用let声明，也就是i只在当前循环有效，每一次循环的i都是新的变量，所以可以准确的把每次i的值赋值给对应的数组元素。</p><p>在这里要说明for循环处是一个父作用域，而循环内是一个单独的子作用域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(let i=0;i&lt;3;i++)&#123;</span><br><span class="line">    let i = &quot;children&quot;;</span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// children</span><br><span class="line">// children</span><br><span class="line">// children</span><br></pre></td></tr></table></figure></p><p>这里的控制循环中的i不会受内部i的影响，说明在各自的作用域内。</p><h1 id="变量提升？"><a href="#变量提升？" class="headerlink" title="变量提升？"></a>变量提升？</h1><p>js中变量的一大特点就是变量提升了，var会变量提升，那么let呢？</p><h2 id="什么是变量提升"><a href="#什么是变量提升" class="headerlink" title="什么是变量提升"></a>什么是变量提升</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(x);         // undefined</span><br><span class="line">var x = 2018;</span><br></pre></td></tr></table></figure><p>在一般的程序中，我们会认为以上代码会报错Uncaught ReferenceError: x is not defined。因为在声明x之前就调用了x。但是js中会显示undefined，这就是变量提升了，在默认把所用变量的声明提升到程序顶部，类似于一下代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x;</span><br><span class="line">console.log(x);         // undefined</span><br><span class="line">x = 2018;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，在变量提升时。只会提升变量的声明，不会提升赋值，这也就是为什么输出是undefined，而不是2018。</p><h2 id="let木有变量提升"><a href="#let木有变量提升" class="headerlink" title="let木有变量提升"></a>let木有变量提升</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(x);         // Uncaught ReferenceError: x is not defined</span><br><span class="line">let x = 2018;</span><br></pre></td></tr></table></figure><h1 id="暂时性死区（TDZ）"><a href="#暂时性死区（TDZ）" class="headerlink" title="暂时性死区（TDZ）"></a>暂时性死区（TDZ）</h1><p>暂时性死区就是在代码块内，使用let命令声明变量之前，该变量是不可用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x = 2018;</span><br><span class="line">if(true)&#123;</span><br><span class="line">    x = 2019;       // Uncaught ReferenceError: x is not defined</span><br><span class="line">    let x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要在块级作用域中存在let命令，那么let声明的变量会绑定当前作用域，不受外部影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">    //开始暂时性死区</span><br><span class="line">    x = &apos;begin&apos;;        //Uncaught ReferenceError: x is not defined</span><br><span class="line">    console.log(x);     //Uncaught ReferenceError: x is not defined</span><br><span class="line"></span><br><span class="line">    let x;      //暂时性死区结束</span><br><span class="line">    console.log(x);     //undefined</span><br><span class="line"></span><br><span class="line">    x = &apos;end&apos;;</span><br><span class="line">    console.log(x);     // end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码演示了暂时性死区的范围。<br>有一些暂时性死区是很隐蔽的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun (x = y , y = 2)&#123;</span><br><span class="line">    return [x,y]</span><br><span class="line">&#125;</span><br><span class="line">fun();      //Uncaught ReferenceError: y is not defined</span><br></pre></td></tr></table></figure></p><p>这里的fun函数中，先是执行x=y语句，由于之后才进行y=2的声明，所以在y=2声明之前会暂时性死区。<br>如果改成以下这个样子，那么这个函数就没有问题了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun (x = 2 , y = x)&#123;</span><br><span class="line">    return [x,y]</span><br><span class="line">&#125;</span><br><span class="line">fun();      // [2,2]</span><br></pre></td></tr></table></figure></p><p>总之，暂时性死区的本质就是，只要进入当前作用域，所要使用的变量就已经存在，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><h1 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h1><p>let不允许在相同作用域中重复声明同一个变量，哪怕不用let命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fun () &#123;</span><br><span class="line">    let x = 10;</span><br><span class="line">    var x = 11;</span><br><span class="line">&#125;</span><br><span class="line">fun();      //报错</span><br></pre></td></tr></table></figure><p>同理，函数内部也不能声明和参数一样的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun (x) &#123;</span><br><span class="line">    let x;</span><br><span class="line">&#125;</span><br><span class="line">fun();      //报错</span><br></pre></td></tr></table></figure></p><p>这就是ES6中一些let命令的介绍。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3中的transform和transition</title>
      <link href="/2018/05/14/CSS3%E4%B8%AD%E7%9A%84transform%E5%92%8Ctransition/"/>
      <url>/2018/05/14/CSS3%E4%B8%AD%E7%9A%84transform%E5%92%8Ctransition/</url>
      
        <content type="html"><![CDATA[<p>之前看了CSS3的一些效果，对其中的3D比较感兴趣，看了看transform和动画效果，因为时间原因也就简单的总结下transform的一些要点。用transform来实现一些动画效果。</p><h1 id="1-transition"><a href="#1-transition" class="headerlink" title="1.transition"></a>1.transition</h1><ul><li>transition: property duration timing-function delay<br>老生常谈的东西，transition如同margin的CSS属性一样，是几个属性的合并写法，他们分别是：</li><li>transition-property<br>需要过渡的属性</li><li>transition-duration<br>过渡开始的时间</li><li>transition-timing-function<br>过渡的速度曲线，可由<a href="http://cubic-bezier.com" target="_blank" rel="noopener">这里</a>生成</li><li>transition-delay<br>过渡效果的延迟开始时间</li></ul><h1 id="2-transform"><a href="#2-transform" class="headerlink" title="2.transform"></a>2.transform</h1><p>需要转换的属性，W3C上对所有属性都有介绍，就不多赘述。在这里重点说下perspective属性。</p><p>perspective:观察元素的距离，也就是俗称的透视，学过美术和建筑的对这玩意不会陌生,在CSS3中设置perspective就是Z轴的观察距离，所以perspective越小，离得越近变化就越明显。根据透视的基点不同，产生的透视效果也不同<a href="http://www.zhangxinxu.com/study/201209/transform-perspective-same-rotate.html" target="_blank" rel="noopener">here</a>。</p><p>在这里借用一张图：<br><img src="http://p6894qyp6.bkt.clouddn.com/3d.png" alt=""><br>这样就对网页的3D有所了解了，所谓的perspective就是我们相对于页面平面的距离。</p><h1 id="3-transform-style"><a href="#3-transform-style" class="headerlink" title="3.transform-style"></a>3.transform-style</h1><ul><li>transform-style: flat | preserve-3d</li></ul><p>属性值中的flat是指以2D形式呈现子元素，preserve-3d指以3D形式呈现子元素。<br>也就是说，如果对一个元素设置了transform-style的值为flat，则该元素的所有子元素都将被平展到该元素的2D平面中进行呈现。沿着X轴或Y轴方向旋转该元素将导致位于正或负Z轴位置的子元素显示在该元素的平面上，而不是它的前面或者后面。如果对一个元素设置了transform-style的值为preserve-3d，它表示不执行平展操作，他的所有子元素位于3D空间中。</p><h1 id="4-perspective-origin"><a href="#4-perspective-origin" class="headerlink" title="4.perspective-origin"></a>4.perspective-origin</h1><p>属性是3D变形中另一个重要属性，主要用来决定perspective属性的源点角度。它实际上设置了X轴和Y轴位置(或者说基点)，在该位置观看者好像在观看该元素的子元素。<br>可取值：<br>x-axis：</p><ul><li>left</li><li>center</li><li>right</li><li>length</li><li>%</li></ul><p>y-axis:</p><ul><li>top</li><li>center</li><li>bottom</li><li>length</li><li>%</li></ul><h1 id="5-如何写出不一样的弹出框动画"><a href="#5-如何写出不一样的弹出框动画" class="headerlink" title="5.如何写出不一样的弹出框动画"></a>5.如何写出不一样的弹出框动画</h1><p>简单的通过3D旋转和JS做出旋转效果<br>HTML、CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style media=&quot;screen&quot;&gt;</span><br><span class="line"></span><br><span class="line">    .outer-1&#123;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        width: 100%;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line">      .outer&#123;</span><br><span class="line">        padding: 20px;</span><br><span class="line">        height: 600px;</span><br><span class="line">        width: 600px;</span><br><span class="line">        background-color: #c2eed9;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">  &lt;div class=&quot;outer-1&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;outer&quot; style=&quot;transition: all 800ms ease 0ms; transform: rotate3d(0, 0, 0, 0deg); transform-style: preserve-3d; pointer-events: auto; display: block;&quot;&gt;</span><br><span class="line">      &lt;h1&gt;这是第一行标题，我也不知道写什么&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;这是第二行，就是试下&lt;/h2&gt;</span><br><span class="line">      &lt;h3&gt;emmmmm,第三回？好吧这是最后一个标题了，我已经不打算写了&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;Some thing&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>JS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">     var temp = true;</span><br><span class="line">     function fun()&#123;</span><br><span class="line">       if(temp)&#123;</span><br><span class="line">       temp = false;</span><br><span class="line">       $(&quot;.outer&quot;).css(&#123;</span><br><span class="line">         &quot;transition&quot;: &quot;all 800ms ease 0ms&quot;</span><br><span class="line">       &#125;)</span><br><span class="line">       $(&quot;.outer&quot;).css(&#123;</span><br><span class="line">         &quot;transform&quot;: &quot;rotate3d(1, 1, 1,240deg)&quot;,</span><br><span class="line">         &quot;transform-style&quot;: &quot;preserve-3d&quot;,</span><br><span class="line">         &quot;pointer-events&quot;: &quot;auto&quot;,</span><br><span class="line">       &#125;)</span><br><span class="line">       setTimeout(function()&#123;</span><br><span class="line">         $(&quot;.outer&quot;).css(&#123;</span><br><span class="line">           &quot;display&quot;: &quot;none&quot;</span><br><span class="line">         &#125;)</span><br><span class="line">      &#125;, 800);</span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">       temp = true;</span><br><span class="line">       console.log(&quot;xxxx&quot;);</span><br><span class="line">       $(&quot;.outer&quot;).css(&#123;</span><br><span class="line">         &quot;display&quot; : &quot;block&quot;,</span><br><span class="line">       &#125;)</span><br><span class="line">       setTimeout(function()&#123;</span><br><span class="line">       $(&quot;.outer&quot;).css(&#123;</span><br><span class="line">         &quot;transition&quot;: &quot;all 800ms ease 0ms&quot;,</span><br><span class="line">       &#125;)</span><br><span class="line">       $(&quot;.outer&quot;).css(&#123;</span><br><span class="line">         &quot;transform&quot;: &quot;rotate3d(0, 0, 0,0deg)&quot;,</span><br><span class="line">         &quot;transform-style&quot;: &quot;preserve-3d&quot;,</span><br><span class="line">         &quot;pointer-events&quot;: &quot;auto&quot;,</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;,50);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">     $(&quot;.btn&quot;).click(fun);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Live2D(lao)(po)的web页面实现</title>
      <link href="/2018/04/17/Live2D-lao-po-%E7%9A%84web%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/17/Live2D-lao-po-%E7%9A%84web%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="当live2D到web页面"><a href="#当live2D到web页面" class="headerlink" title="当live2D到web页面"></a>当live2D到web页面</h1><p>之前写了在博客上运用npm模块实现live2D，现在把web页面上的live2D的坑一填。live2D之前主要运用在游戏方面，web方面的运用并不是很多。但是需求是需要满足的，我们要怎么实现web端的live2D呢？好在WebGL已经搞定了这个最难的部分，提供了官方的SDK。</p><p>[SDK下载]：Live2D_SDK_WebGL_2.0.05_1_en.zip</p><p>下载之后我们开始对SDK经行分析</p><h1 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h1><p><img src="http://p6894qyp6.bkt.clouddn.com/2d.png" alt=""></p><ul><li>framework：framework框架的js文件</li><li>lib：live2d的js文件</li><li>sample：官方给的例子，SampleApp1是比较完整的例子，Sample和SimpleMultiCanves只是类似于gif的效果<blockquote><p>需要注意的是live2d的SDK会牵扯到跨域问题，以下是在chrome下的问题，把文件夹放到服务器上可以解决，或者用Edge打开html文件<br><img src="http://p6894qyp6.bkt.clouddn.com/ky.png" alt=""></p></blockquote></li></ul><h1 id="SampleApp1分析"><a href="#SampleApp1分析" class="headerlink" title="SampleApp1分析"></a>SampleApp1分析</h1><h2 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h2><ul><li>images：示例里面的背景图片</li><li>live2d：live2d的模型和动作数据，文件夹名称为模型的名字</li></ul><h3 id="模型包文件-例：shizuku"><a href="#模型包文件-例：shizuku" class="headerlink" title="模型包文件(例：shizuku)"></a>模型包文件(例：shizuku)</h3><ul><li>expresssions：表情的配置文件，json格式</li><li>motions：动作文件，只要处理点击时候的动作，mtn文件</li><li>shizuku.1024：人物的肉体图片（尸块），png文件</li><li>sounds：声音文件，有些模型没有，mp3文件</li><li>shizuku.model.json：对上面各个文件夹中的文件经行引入</li></ul><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><ul><li>LAppDefine.js：对模型的定义</li><li>LAppLive2DManger.js：对模型的创建和切换等等</li><li>SampleApp.js：在这个文件中有一个参数需要特别注意，在文件34行，initL2dCanvas(“glCanvas”)；这里括号内的字符串是在HTML文件上canvas的ID，这样才能完成页面的渲染。</li></ul><p>SampleApp.js:</p><p><img src="http://p6894qyp6.bkt.clouddn.com/in.png" alt=""></p><p>index.html:</p><p><img src="http://p6894qyp6.bkt.clouddn.com/ht.png" alt=""></p><h2 id="HTML文件"><a href="#HTML文件" class="headerlink" title="HTML文件"></a>HTML文件</h2><p>把相应的文件引入即可，之后设置canvas就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script src=&apos;lib/live2d.min.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&apos;framework/Live2DFramework.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/utils/MatrixStack.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/utils/ModelSettingJson.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/PlatformManager.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/LAppDefine.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/LAppModel.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/LAppLive2DManager.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/SampleApp1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;canvas id=&quot;glCanvas&quot; width=&quot;450px&quot; height=&quot;500px&quot; style=&quot;position:fixed;right:0px;bottom:-10px;&quot;&gt;</span><br><span class="line">    &lt;/canvas&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      SampleApp1();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><ul><li>canvas的id要和SampleApp.js中定义的一样，上面强调过</li><li>canvas的width和height就是live2d的宽高</li><li>canvas的position：定义在页面上的位置</li><li>SampleApp1()：执行SampleApp1文件</li></ul><p>如果不想用切换模型功能可以把LAppLive2DManager.js中有change部分的函数注释掉，再修改LAppDefine。</p><h1 id="在live2d上越走越远…"><a href="#在live2d上越走越远…" class="headerlink" title="在live2d上越走越远…"></a>在live2d上越走越远…</h1><p>这样就完成了html文件上live2d的引用，关于live2d的模型包可以从一些手游的apk解包获得，或者去网上下载。之后可能会写一下apk的解包，说不定也会看看live2d的动作设计，嘛，这都是之后的事了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> live2D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一只博客看板(lao)娘(po)</title>
      <link href="/2018/04/10/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%AA%E5%8D%9A%E5%AE%A2%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/2018/04/10/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%AA%E5%8D%9A%E5%AE%A2%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<h1 id="博客的吉祥物"><a href="#博客的吉祥物" class="headerlink" title="博客的吉祥物"></a>博客的吉祥物</h1><p>之前在B站看直播时发现了右边有一只萌萌的22娘在左顾右盼，对这个很好奇，但是没有花时间去看。之后在别人的博客看到了差不多的效果，瞬间来了兴致。这种效果让我想到了玩过的手游上的live2D（重度手游玩家…）。经过一翻查找后，果然是live2D。那么怎么让妹(lao)子(po)跑到自己的博客上呢，经过查找后不禁感叹：万能的github!</p><p>22娘：</p><p><img src="http://p6894qyp6.bkt.clouddn.com/22n.png" alt=""></p><p>没错，要在博客上放上看板娘，需要模块<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a>。下面就给讲一下我的搭建过程。</p><ul><li>本文实例的博客为hexo+github搭建</li><li>网页上添加看板娘之后会另写一篇博客</li><li>也可以直接参考官方的<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">README</a>文档</li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>在博客根目录安装模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml</p><blockquote><p>将下面代码添加至_config.yml，在这里简单讲一些参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: node_modules/live2d-widget  # 插件在站点上的根目录(相对路径，相对于_config.yml)</span><br><span class="line">  pluginJsPath: lib/  # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/  # 模型文件相对与插件根目录路径</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku # npm-module package name（你要用的看板娘模型，之后介绍）</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  mobile:</span><br><span class="line">    show: false  # 手机端是否显示</span><br><span class="line">    scale: 0.5   # 手机端显示的比例</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    width: 130  # 看板娘宽度</span><br><span class="line">    height: 260 # 看板娘高度</span><br><span class="line">    position: right #看板娘位置左下、右下</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -20</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.9 # 默认不透明度</span><br><span class="line">    opacityOnHover: 0.9</span><br></pre></td></tr></table></figure></blockquote></li></ul><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><ul><li>npm上有相当多的模型，<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">查看</a></li><li><p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">各个模型的样子</a></p></li><li><p>下载模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 模型的包名</span><br></pre></td></tr></table></figure></li><li><p>下载完成后在_config.yml中配置model.use</p></li></ul><p>这样就完成了hexo+github博客的看板娘搭建了ヾ(o◕∀◕)ﾉヾ</p>]]></content>
      
      
      
        <tags>
            
            <tag> live2D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3动画库Animate.css</title>
      <link href="/2018/04/09/CSS3%E5%8A%A8%E7%94%BB%E5%BA%93Animate-css/"/>
      <url>/2018/04/09/CSS3%E5%8A%A8%E7%94%BB%E5%BA%93Animate-css/</url>
      
        <content type="html"><![CDATA[<h1 id="何为Animate-css"><a href="#何为Animate-css" class="headerlink" title="何为Animate.css"></a>何为Animate.css</h1><p>在写CSS3的动画效果时，时常因为自己实现的效果不好，或者庞大的代码量而头痛不已。那么这时候就轮到我们强大的动画库登场了，之前写东西的时候找到了Animate.css这个动画库。看到Animate，就让我们想到了CSS3中的animation属性。没错，Animate.css就是一个功能强大的CSS3动画库。</p><ul><li><a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">github地址</a></li><li>npm安装<blockquote><p>$ npm install animate.css</p></blockquote></li><li>CDN<blockquote><p><a href="https://unpkg.com/animate.css@3.5.2/animate.min.css" target="_blank" rel="noopener">https://unpkg.com/animate.css@3.5.2/animate.min.css</a></p></blockquote></li><li><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">在线演示</a></li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="CSS引入"><a href="#CSS引入" class="headerlink" title="CSS引入"></a>CSS引入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;animate.min.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h2 id="给元素加上animated类名"><a href="#给元素加上animated类名" class="headerlink" title="给元素加上animated类名"></a>给元素加上animated类名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;animated&quot;&gt;demo&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="根据需要的动画效果添加对应的动画类名-如rotateInDownRight"><a href="#根据需要的动画效果添加对应的动画类名-如rotateInDownRight" class="headerlink" title="根据需要的动画效果添加对应的动画类名(如rotateInDownRight)"></a>根据需要的动画效果添加对应的动画类名(如rotateInDownRight)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;animated rotateInDownRight&quot;&gt;demo&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样就完成了静态的动画效果添加</p><h1 id="动态添加动画样式"><a href="#动态添加动画样式" class="headerlink" title="动态添加动画样式"></a>动态添加动画样式</h1><p>由静态的样式添加，我们可以知道如果想让元素有动画效果，只需给它增添对应的class属性即可。所以问题就迎刃而解了。</p><h2 id="运用jQuery经行class的添加-js同理"><a href="#运用jQuery经行class的添加-js同理" class="headerlink" title="运用jQuery经行class的添加(js同理)"></a>运用jQuery经行class的添加(js同理)</h2><ul><li>添加class<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.demo&apos;).addClass(&apos;animated rotateInDownRight&apos;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="如果你需要给元素添加其他动画，或元素隐藏后让他重现，那么你需要将class名删除-再之后你就可以进行上一步的动画效果添加了"><a href="#如果你需要给元素添加其他动画，或元素隐藏后让他重现，那么你需要将class名删除-再之后你就可以进行上一步的动画效果添加了" class="headerlink" title="如果你需要给元素添加其他动画，或元素隐藏后让他重现，那么你需要将class名删除,再之后你就可以进行上一步的动画效果添加了"></a>如果你需要给元素添加其他动画，或元素隐藏后让他重现，那么你需要将class名删除,再之后你就可以进行上一步的动画效果添加了</h2><ul><li>class名的添加后移除<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    $(&apos;.demo&apos;).addClass(&apos;animated rotateInDownRight&apos;);</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        $(&apos;.demo&apos;).removeClass(&apos;rotateInDownRight&apos;);</span><br><span class="line">    &#125;, 500);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Animate.css是一款强大的CSS3动画库，他的所有动画样式（class名）可以在 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">在线演示</a> 看到和获取。通过操作class可以灵活运用Animate.css实现动画效果，大大减少了工作量，提高效率。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery中的动画积累问题</title>
      <link href="/2018/04/09/jQuery%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%E7%A7%AF%E7%B4%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2018/04/09/jQuery%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%E7%A7%AF%E7%B4%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery中的动画累积问题"><a href="#jQuery中的动画累积问题" class="headerlink" title="jQuery中的动画累积问题"></a>jQuery中的动画累积问题</h1><p>在之前用jQuery做hover动画效果时发现当鼠标快速滑入画出触发元素时，动画会出现累积。在执行完一次之后多次执行，直到动画队列执行完毕。很影响动画效果，毕竟鼠标不小心划过都会触发动画。同样当你用click事件多次点击时动画也是会累积。为什么会出现动画累积呢？因为动画的执行需要时间而事件的触发不需要时间间隔，所以会出现动画累积。之后，我找到了两种解决方法。</p><p></p><p></p><h1 id="1-stop"><a href="#1-stop" class="headerlink" title="1.stop()"></a>1.stop()</h1><p><strong>语法：$(selector).stop(stopAll,goToEnd)</strong></p><p></p><p><strong>两个参数的值为true或者false，默认值为false。</strong></p><br><p><strong>stopAll可选。规定是否停止被选元素的所有加入队列的动画。</strong></p><br><p><strong>goToEnd    可选。规定是否允许完成当前的动画。该参数只能在设置了 stopAll 参数时使用。</strong></p><br><p>1.stop()，由于两个参数都是false。所以事件发生时，animater没有跳到当前动画（动画1）的最终效果，而直接进入动画2，然后动画3，4，5.直至完成整个动画。</p><br><p>2.stop(true)，由于第一个是true，第二个是false，所以animater立刻全部停止了。</p><br><p>3.stop(false,true)，由于第一个是false，第二个是true，所以事件发生时，animater身处的当前动画（动画1）停止并且animater直接跳到当前动画（动画1）的最终末尾效果位置，接着正常执行下面的动画（动画2，3，4，5），直至完成整个动画。</p><br><p>4.stop(true，true)，由于两个都是true，所以事件发生时，animater跳到当前动画（动画1）的最终末尾效果位置，然后，全部动画停止。</p><br><p><strong>stop()的解决思路是当动画累积时，每次动画先停止之前动画，而进行该次动画，即每次执行的是原动画队列中的最后一个动画。</strong></p><br><h4 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h4><p>HTML:</p><br><pre><code>&lt;body&gt;<br>    &lt;div class=&quot;out&quot;&gt;<br>        &lt;div class=&quot;front&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br></code></pre><p>CSS:</p><br><pre><code>.out<br>{<br>    width: 200px;<br>    height: 200px;<br>    background-color: black;<br>    margin-bottom: 2vh;<br>}<br>.front<br>{<br>    position: relative;<br>    top: 10%;<br>    left: 10%;<br>    width: 80%;<br>    height: 80%;<br>    background-color: red;<br>    display: none;<br>}<br></code></pre><p>jQuery:</p><br><pre><code>$(document).ready(function(){<br>         $(&quot;.out&quot;).hover(function()<br>         {<br>             $(this).find(&quot;.front&quot;).stop(true);<br>             $(this).find(&quot;.front&quot;).fadeIn(&apos;slow&apos;);<br>         },<br>         function()<br>         {<br>             $(this).find(&quot;.front&quot;).stop(true);<br>             $(this).find(&quot;.front&quot;).fadeOut(&apos;fast&apos;);<br>         })<br>     });<br></code></pre><h1 id="2-setTimeout"><a href="#2-setTimeout" class="headerlink" title="2.setTimeout"></a>2.setTimeout</h1><p><strong>语法：setTimeout(code,millisec)</strong></p><br><p><strong>code必需。要调用的函数后要执行的 JavaScript 代码串。</strong></p><br><p><strong>millisec必需。在执行代码前需等待的毫秒数。</strong></p><br><p><strong>setTimeout的解决思路是延迟动画执行时间。而利用setTimeout，我们增长了事件触发到动画执行的时间，如果在这段时间有另一个事件触发我们则清除这个待执行的动画去执行下个动画，以此来解决动画积累。</strong></p><br><h4 id="测试代码：-1"><a href="#测试代码：-1" class="headerlink" title="测试代码："></a>测试代码：</h4><p>jQuery:</p><br><pre><code>var timer=null;<br>        $(document).ready(function(){<br>         $(&quot;.out&quot;).hover(function()<br>         {<br>             var child = $(this).find(&quot;.front&quot;);<br>             timer=setTimeout(function()<br>            {<br>                 child.fadeIn(&apos;slow&apos;)<br>            },500);<br>         },<br>         function()<br>         {<br>             if(timer)<br>             clearTimeout(timer);<br>             $(this).find(&quot;.front&quot;).fadeOut(&apos;fast&apos;);<br>         });<br>     });<br></code></pre><p>在这要注意在执行setTimeout前用一个变量(child)来保存动画对象。因为在setTimeout中this指向的是window。有可能导致对象的丢失。</p><br><p>用setTimeout并不能完美解决动画累积，因为在执行动画时，如果我们再次触发事件还是会进行累积，这点在click事件中尤为明显。所以在click事件中推荐用stop()解决问题。</p><br><h2 id="个人看法"><a href="#个人看法" class="headerlink" title="个人看法"></a>个人看法</h2><p>最后说一些个人看法吧，在动画时间短或瞬间执行完成的hover事件中个人倾向用setTimeout解决（想象一下一个大型模态框在你鼠标不小心划过触发元素时就瞬间弹出了…）。而在click事件中用stop()解决动画累积问题。</p><p>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当display:flex遇到margin:10%</title>
      <link href="/2018/04/09/%E5%BD%93display-flex%E9%81%87%E5%88%B0margin-10/"/>
      <url>/2018/04/09/%E5%BD%93display-flex%E9%81%87%E5%88%B0margin-10/</url>
      
        <content type="html"><![CDATA[<h1 id="当display-flex遇到margin-10"><a href="#当display-flex遇到margin-10" class="headerlink" title="当display:flex遇到margin:10%"></a>当display:flex遇到margin:10%</h1><p><meta property="og:description" content="最近发现了CSS中关于单位：%  的一些有趣的东西。让我之前遇到了不少BUG，之后就去看了一下这方面的东西，把之前的坑填一下。测试版本：Chrome(59.0.3071.115)   Firefox(54.0.1)1.当%遇到margin和padding在规定子元素的height和width时，我们常常会用%来设置。它的height和width为它父元素对应数值的百分比。这个非常好理解。那么如"></p><p><meta property="og:updated_time" content="2017-08-01T08:57:00.956Z"></p><p><meta name="twitter:card" content="summary"></p><p><meta name="twitter:title" content="当display:flex遇到margin:10%"></p><meta name="twitter:description" content="最近发现了CSS中关于单位：%  的一些有趣的东西。让我之前遇到了不少BUG，之后就去看了一下这方面的东西，把之前的坑填一下。测试版本：Chrome(59.0.3071.115)   Firefox(54.0.1)1.当%遇到margin和padding在规定子元素的height和width时，我们常常会用%来设置。它的height和width为它父元素对应数值的百分比。这个非常好理解。那么如">  <link rel="alternative" href="/atom.xml" title="Gaminghard" type="application/atom+xml">  <link rel="icon" href="/favicon.png"><p><link rel="stylesheet" href="/perfect-scrollbar/css/perfect-scrollbar.min.css"></p><link rel="stylesheet" href="/styles/main.css"><p></p><p>  <br>  <div class="article-entry"><br>    <p>最近发现了CSS中关于单位：%  的一些有趣的东西。让我之前遇到了不少BUG，之后就去看了一下这方面的东西，把之前的坑填一下。</p></div></p><p><strong>测试版本：Chrome(59.0.3071.115)   Firefox(54.0.1)</strong></p><br><h1 id="1-当-遇到margin和padding"><a href="#1-当-遇到margin和padding" class="headerlink" title="1.当%遇到margin和padding"></a>1.当%遇到margin和padding</h1><p>在规定子元素的height和width时，我们常常会用%来设置。它的height和width为它父元素对应数值的百分比。这个非常好理解。那么如果我设置margin: 10%;padding: 10%;呢，margin和padding的值各是多少。下面举一个例子。</p><br><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><pre><code>&lt;body&gt;<br>&lt;div id=&quot;first&quot;&gt;<br>    &lt;div id=&quot;second&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br></code></pre><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><pre><code>#first<br>{<br>    height: 800px;<br>    width: 600px;<br>    background-color: #66ccff;<br>}<br>#second<br>{<br>    height: 100px;<br>    width: 100px;<br>    background-color: #FFE4B5;<br>    margin: 10%;<br>    padding: 10%;<br>}<br></code></pre><p>在这里子元素的margin和padding会是多少呢？期初我认为是 80 60 80 60。之后用调试工具查看以后发现margin和padding都是 60 60 60 60。为什么会是父元素的宽度呢（当然这是在默认的writing-mode: horizontal-tb; 和 direction: ltr; 的情况下）。这其实是和排版有关，当默认的横向排版时，我们的横向宽是度固定的，而纵向是无限延伸的，这就是为什么排版时会换行。所以，我们与其找一个无限延伸的参照物不如找一个长度固定的参照物。这就是为什么默认下margin和padding是以宽度为基准的原因。</p><br><h1 id="2-display-flex下的margin：10"><a href="#2-display-flex下的margin：10" class="headerlink" title="2.display:flex下的margin：10%"></a>2.display:flex下的margin：10%</h1><p>之前用flex布局时，发现了display:flex下的margin：x%是个非常有意思的东西（padding：x%同样）。由于电脑上浏览器有限，只采用了Chrome和Firefox做测试。</p><br><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><pre><code>&lt;body&gt;<br>&lt;div id=&quot;first&quot;&gt;<br>    &lt;div id=&quot;second&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br></code></pre><h4 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h4><pre><code>#first<br>{<br>    height: 800px;<br>    width: 600px;<br>    background-color: #66ccff;<br>    display: flex;<br>}<br>#second<br>{<br>    height: 100px;<br>    width: 100px;<br>    background-color: #FFE4B5;<br>    margin: 10%;<br>    padding: 10%;<br>}<br></code></pre><p>在这里的margin和padding会是多少？如果按照上面所说的那么应该是 60 60 60 60。实际是怎么样的呢？<br>在Chrome和Firefox下这个值是不同的。</p><br><p>Chrome：打开调试工具我们会发现margin是60 60 60 60。和我们之前所说的一样。</p><br><p>Firefox：打开调试工具后，我们会发现它的margin是80 60 80 60。也就是它的margin-top和margin-bottom的基准是父元素的高。</p><br><p>这点在Chrome和Firefox的差异需要注意。</p><br><h2 id="height-auto"><a href="#height-auto" class="headerlink" title="height:auto;"></a>height:auto;</h2><p>当我们对上面代码稍作修改将父元素的height: 800px;修改为height:auto;时，又会发现不同的结果。</p><br><h4 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h4><pre><code>#first<br>{<br>    height: auto;<br>    width: 600px;<br>    background-color: #66ccff;<br>    display: flex;<br>}<br>#second<br>{<br>    height: 100px;<br>    width: 100px;<br>    background-color: #FFE4B5;<br>    margin: 10%;<br>    padding: 10%;<br>}<br></code></pre><p>Chrome：margin 的值为60 60 60 60 与之前两次没有差异。</p><br><p>Firefox：margin 的值为0 60 0 60与之前两次都不同。父元素的height在这里没有作为子元素margin-top和margin-bottom的基准。</p><br><p><strong>margin和padding取%并且父元素为display:flexs时，会在不同浏览器中产生差异。所以最好用vh、vw、px等单位来兼顾浏览器差异。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 浏览器适配 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
